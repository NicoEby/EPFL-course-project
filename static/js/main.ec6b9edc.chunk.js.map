{"version":3,"sources":["serviceWorker.js","Controls.js","helpers.js","Canvas.js","GameStart.js","Timer.js","TypedText.js","DisplayText.js","Game.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Controls","theCanvas","model","labels","onClick","canvas","current","getContext","fillRect","height","width","getPrediction","tensor","tf","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","loadedModel","predict","data","prediction","a","Canvas","React","forwardRef","ref","lastX","lastY","question","correctAnswer","mouseDown","useEffect","context","fillStyle","onMouseDown","onMouseUp","undefined","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","GameStart","props","handleClick","bind","path","this","history","push","nextPath","Component","withRouter","timerReducer","timer","action","type","Timer","useReducer","setTimer","roundActive","callback","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","handleTimeUp","TypedText","options","strings","typeSpeed","showCursor","typed","Typed","el","prevProps","destroy","className","style","whiteSpace","gameTexts","require","DisplayText","useContext","GameContext","gameRound","label","roundWin","score","gameState","useGameState","startText","text","roundLoss","roundText","endText","gameEven","gameWin","gameLoss","mainText","createRef","maxRounds","createContext","round","scoreReducer","Error","roundReducer","roundActiveReducer","Game","gameRoundProp","setGameRound","setScore","setRoundActive","useState","setQuestion","setRoundWin","startNewRound","handleCorrectAnswer","console","log","Provider","value","gameRender","App","to","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec6b9edc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Controls({ theCanvas, model, labels }) {\r\n    //let [prediction, setPrediction] = useState(\"\"); // Sets default label to empty string.\r\n  \r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={() => {\r\n            const canvas = theCanvas.current;\r\n            const ctx = canvas.getContext(\"2d\");\r\n            ctx.fillRect(0, 0, canvas.height, canvas.width);\r\n          }}\r\n        >\r\n          Clear the canvas.\r\n        </button>\r\n        {/*\r\n        <button\r\n          onClick={() =>\r\n            getPrediction(theCanvas, model).then(prediction => {\r\n              setPrediction(labels[prediction[0]]);\r\n              console.log(prediction);\r\n            }\r\n            )\r\n          }\r\n        >\r\n          Predict the drawing.\r\n        </button>\r\n        */}\r\n      </div>\r\n    );\r\n  }\r\n  ","import * as tf from \"@tensorflow/tfjs\";\r\n\r\nfunction preprocessCanvas(canvas) {\r\n  // Preprocess image for the network\r\n  let tensor = tf\r\n    .fromPixels(canvas) // Shape: (300, 300, 3) - RGB image\r\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\r\n    .mean(2) // Shape: (28, 28) - grayscale\r\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\r\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\r\n    .toFloat(); // Network works with floating points inputs\r\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\r\n}\r\n\r\nexport function getPrediction(theCanvas, model) {\r\n  const tensor = preprocessCanvas(theCanvas.current);\r\n  return model\r\n    .then(loadedModel => loadedModel.predict(tensor).data())\r\n    .then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\r\n  }\r\n","import React, { useEffect } from \"react\";\r\nimport { getPrediction } from \"./helpers.js\";\r\n\r\nconst Canvas = React.forwardRef(({ model, labels, question, correctAnswer }, ref) => {\r\n  let mouseDown = false;\r\n  let lastX;\r\n  let lastY;\r\n\r\n  function drawLine(canvas, x, y, lastX, lastY) {\r\n    let context = canvas.getContext(\"2d\");\r\n\r\n    context.strokeStyle = \"#000000\";\r\n    context.lineWidth = 12;\r\n    context.lineJoin = \"round\";\r\n\r\n    context.beginPath();\r\n    context.moveTo(lastX, lastY);\r\n    context.lineTo(x, y);\r\n    context.closePath();\r\n    context.stroke();\r\n\r\n    return [x, y];\r\n  }\r\n\r\n  const handleMouseup = () => {\r\n    mouseDown = false;\r\n    [lastX, lastY] = [undefined, undefined];\r\n    getPrediction(ref, model).then(prediction => {\r\n      if (labels[prediction[0]] === question) {\r\n        correctAnswer();\r\n      }\r\n    })\r\n  };\r\n\r\n  const handleMousemove = e => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    if (mouseDown) {\r\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = ref.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    context.fillStyle = \"#ffffff\";\r\n    context.fillRect(0, 0, canvas.height, canvas.width);\r\n  });\r\n\r\n  return (\r\n    <canvas\r\n      height={300}\r\n      width={300}\r\n      ref={ref}\r\n      onMouseDown={() => (mouseDown = true)}\r\n      onMouseUp={handleMouseup}\r\n      onMouseMove={e => handleMousemove(e)}\r\n    />\r\n  );\r\n});\r\n\r\nexport default Canvas;","import React from \"react\";\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass GameStart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    nextPath(path) {\r\n        this.props.history.push(path);\r\n    }\r\n\r\n    handleClick(e) {\r\n        this.props.handleClick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={() => {\r\n                    this.nextPath(\"/game\");\r\n                    this.handleClick();\r\n                }}>Start Game</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(GameStart);","import React, { useEffect, useRef, useReducer } from \"react\";\r\n\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    });\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n    }, [delay]);\r\n}\r\n\r\nfunction timerReducer(timer, action) {\r\n    switch(action.type) {\r\n        case 'reset':\r\n            return 20;\r\n        case 'countDown':\r\n            return timer - 1;\r\n        default:\r\n            return; \r\n    }\r\n}\r\n\r\nexport default function Timer(props) {\r\n    const [timer, setTimer] = useReducer(timerReducer, 20);\r\n    const roundActive = props.roundActive\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n         setTimer({ type: 'reset'});\r\n    }, [roundActive, props])\r\n\r\n\r\n\r\n        useInterval(() => {\r\n            if (timer > 0) {        //Clock runs until 0\r\n                    setTimer({ type: 'countDown'});\r\n            }\r\n        }, 1000);\r\n\r\n\r\n    if (timer === 0) {\r\n        props.handleTimeUp();\r\n        setTimer({ type: 'reset'});\r\n    }\r\n\r\n    return (\r\n        <label>Time Remaining: {timer}</label>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport Typed from 'typed.js';\r\n\r\nclass TypedText extends Component {\r\n  componentDidMount() {\r\n    const { strings } = this.props;\r\n    const options = {\r\n      strings: strings,\r\n      typeSpeed: 50,\r\n      showCursor: false\r\n    };\r\n    // this.el refers to the <span> in the render() method\r\n    this.typed = new Typed(this.el, options);\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n      if(this.props.strings !== prevProps.strings){\r\n        this.typed.destroy();\r\n        const { strings }  = this.props;\r\n        const options = {\r\n          strings: strings,\r\n          typeSpeed: 50,\r\n          showCursor: false\r\n        };\r\n        this.typed = new Typed(this.el, options);\r\n      }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.typed.destroy();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"type-wrap\">\r\n        <span\r\n          style={{ whiteSpace: 'pre' }}\r\n          ref={(el) => { this.el = el; }}\r\n        />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default TypedText;","import React, { useContext } from \"react\";\r\nimport { GameContext, useGameState } from \"./Game.js\";\r\nimport TypedText from './TypedText.js';\r\n\r\nconst gameTexts = require(\"./gameTexts.json\");\r\n\r\nexport default function DisplayText() {\r\n    const { gameRound, label, roundWin, score } = useContext(GameContext);\r\n    const gameState = useGameState(gameRound);\r\n\r\n    function mainText() {\r\n        switch (gameState) {\r\n            case 'init':  //Before game starts\r\n                return gameTexts.startText;\r\n\r\n            case 'game': //Game is ongoing\r\n                let text = \"\";\r\n\r\n                if (roundWin) {\r\n                    text = (<div><TypedText strings={[gameTexts.roundWin]} /><br /> </div>);\r\n                } else {\r\n                    text = (<div><TypedText strings={[gameTexts.roundLoss]} /><br /> </div>);\r\n                }\r\n                if (typeof roundWin === \"undefined\") { //Firstround\r\n                    text = (<div><br /><br /></div>);\r\n                }\r\n                return (<div>{text} {gameTexts.roundText}<b>{label}</b>!</div>);\r\n\r\n            case 'end': //After game has ended\r\n                let endText = \"\";\r\n\r\n                if (score === 0) {\r\n                    endText = gameTexts.gameEven;\r\n                } else if (score > 0) {\r\n                    endText = gameTexts.gameWin;\r\n                } else {\r\n                    endText = gameTexts.gameLoss;\r\n                }\r\n                return <div>{\"Your Final Score: \" + score.score} <br /> {endText} </div>;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {mainText()}\r\n        </div>\r\n    );\r\n}","import React, { useState, useReducer, useEffect } from \"react\";\r\nimport Controls from \"./Controls\";\r\nimport Canvas from \"./Canvas\";\r\nimport GameStart from \"./GameStart.js\";\r\nimport Timer from \"./Timer.js\";\r\nimport DisplayText from \"./DisplayText.js\";\r\n\r\nconst labels = require(\"./labels.json\");\r\nlet ref = React.createRef();\r\nconst maxRounds = 10;\r\n\r\nexport const GameContext = React.createContext();\r\n\r\nexport function useGameState(round) {        \r\n    if (round === 0) {\r\n        return 'init';\r\n    } else if (round === maxRounds + 1) {\r\n        return 'end';\r\n    } else {\r\n        return 'game';\r\n    }\r\n\r\n}\r\n\r\nfunction scoreReducer(score, action) {\r\n    switch (action.type) {\r\n        case 'increment':\r\n            return score + 1;\r\n        case 'decrement':\r\n            return score - 1;\r\n        case 'reset':\r\n            return 0;\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\n\r\nfunction roundReducer(gameRound, action) {\r\n    switch (action.type) {\r\n        case 'nextRound':\r\n            return gameRound + 1;\r\n        case 'init':\r\n        case 'reset':\r\n            return 0;\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nfunction roundActiveReducer(roundActive, action) {\r\n    switch (action.type) {\r\n        case 'roundActive':\r\n            return true;\r\n        case 'roundInactive':\r\n            return false;\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport default function Game({ model, gameRoundProp }) {\r\n    const [gameRound, setGameRound] = useReducer(roundReducer, 0);\r\n    const [score, setScore] = useReducer(scoreReducer, 0);\r\n    const [roundActive, setRoundActive] = useReducer(roundActiveReducer, false);\r\n    const [question, setQuestion] = useState();\r\n    const [roundWin, setRoundWin] = useState();\r\n    console.log(\"GameRound: \" + gameRound)\r\n\r\n    useEffect(() => {\r\n        if (gameRoundProp.gameRound === 0) {\r\n            setGameRound({ type: 'init' });\r\n        } else if (gameRoundProp.gameRound === 1) {\r\n            gameRoundProp.gameRound = undefined;\r\n            setScore({ type: 'reset' });\r\n\r\n            setGameRound({ type: 'reset' });\r\n            setRoundWin(undefined)\r\n            startNewRound();\r\n        }\r\n    }, [gameRoundProp.gameRound]);\r\n\r\n    function handleClick(e) {\r\n        startNewRound();\r\n    }\r\n\r\n    function startNewRound() {\r\n        if (gameRound <= maxRounds) {\r\n            setRoundActive({ type: 'roundActive' });\r\n            setGameRound({ type: 'nextRound' });\r\n            setQuestion(labels[gameRound]);\r\n        }\r\n    }\r\n\r\n    function handleCorrectAnswer() {\r\n        setRoundWin(true);\r\n        setScore({ type: 'increment' });\r\n        setRoundActive({ type: 'roundInactive' });\r\n        startNewRound();\r\n    }\r\n\r\n    function handleTimeUp() {\r\n        setRoundWin(false);\r\n        setScore({ type: 'decrement' });\r\n        setRoundActive({ type: 'roundInactive' });\r\n        startNewRound();\r\n    }\r\n\r\n    const gameState = useGameState(gameRound)\r\n\r\n    function gameRender() {\r\n        switch (gameState) {\r\n            case 'init':\r\n                return <GameStart handleClick={handleClick} />;\r\n            case 'game':\r\n                return (\r\n                    <div>\r\n                        <Timer roundActive={roundActive} handleTimeUp={handleTimeUp} />\r\n                        <label> Round: {gameRound} Score: {score}</label><br></br>\r\n                        <Canvas ref={ref} model={model} labels={labels} question={question} correctAnswer={handleCorrectAnswer} />\r\n                        <Controls theCanvas={ref} model={model} labels={labels} />\r\n                    </div>);\r\n            case 'end': return <div></div> //This is empty because all text is handeld in Display Text Component\r\n            default: \r\n                return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GameContext.Provider\r\n            value=\r\n            {{\r\n                \"gameRound\": gameRound,\r\n                \"label\": labels[gameRound - 1],\r\n                \"roundWin\": roundWin,\r\n                \"score\": { score }\r\n            }}>\r\n            <DisplayText />\r\n            {gameRender()}\r\n        </GameContext.Provider>\r\n    )\r\n}","import React from \"react\";\r\nimport Game from \"./Game\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nconst model = tf.loadModel(\"./model/model.json\");\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Link to=\"/home\">Home</Link>\r\n        <Link to=\"/game\">New Game</Link>\r\n\r\n        <Route\r\n          path='/home'\r\n          render={(props) => (<Game {...props} model={model} gameRoundProp={{gameRound : 0}}/>)}\r\n        />\r\n        <Route\r\n          path=\"/game\"\r\n          render={(props) => (<Game {...props} model={model} gameRoundProp={{gameRound: 1}}/> )}\r\n        />\r\n\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n    {/*<Router>\r\n      <Link to=\"/gamestart\">New Game</Link>\r\n\r\n\r\n      <Route\r\n        path='/gamestart'\r\n        exact component={() => <Game />}\r\n      />\r\n\r\n    </Router>*/}\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}